// Ejercicio1
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Función para crear un nuevo nodo
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Función para generar una lista enlazada de tamaño n con números aleatorios entre 1 y 999
Node* generateList(int n) {
    Node* head = NULL;
    Node* temp;
    srand(time(NULL));
    
    for (int i = 0; i < n; i++) {
        int num = rand() % 999 + 1;
        Node* newNode = createNode(num);
        
        if (head == NULL) {
            head = newNode;
        } else {
            temp = head;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
    return head;
}

// Función para imprimir la lista
void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Función para eliminar nodos fuera del rango
Node* deleteOutOfRange(Node* head, int low, int high) {
    Node* temp = head;
    Node* prev = NULL;

    while (temp != NULL) {
        if (temp->data < low || temp->data > high) {
            if (prev == NULL) {
                // Si el nodo a eliminar es el primero
                head = temp->next;
                free(temp);
                temp = head;
            } else {
                // Nodo intermedio o final
                prev->next = temp->next;
                free(temp);
                temp = prev->next;
            }
        } else {
            prev = temp;
            temp = temp->next;
        }
    }
    return head;
}

int main() {
    Node* list = generateList(50);

    printf("Lista original:\n");
    printList(list);

    int low, high;
    printf("\nIntroduce el valor mínimo del rango: ");
    scanf("%d", &low);
    printf("Introduce el valor máximo del rango: ");
    scanf("%d", &high);

    list = deleteOutOfRange(list, low, high);

    printf("\nLista después de eliminar los nodos fuera del rango:\n");
    printList(list);

    return 0;
}
// Ejercicio2
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct {
    Node* head;
} List;

// Función para crear un nuevo nodo
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Función para inicializar la lista
void initList(List* list) {
    list->head = NULL;
}

// Función para agregar un nodo a la lista
void addNode(List* list, int data) {
    Node* newNode = createNode(data);
    if (list->head == NULL) {
        list->head = newNode;
    } else {
        Node* temp = list->head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Función para generar una lista con números aleatorios entre 1 y 999
void generateList(List* list, int n) {
    for (int i = 0; i < n; i++) {
        int num = rand() % 999 + 1;
        addNode(list, num);
    }
}

// Función para imprimir la lista
void printList(List* list) {
    Node* temp = list->head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Función para buscar un valor en la lista y contar el número de apariciones
void searchList(List* list, int value) {
    Node* temp = list->head;
    int count = 0;

    while (temp != NULL) {
        if (temp->data == value) {
            count++;
        }
        temp = temp->next;
    }

    if (count > 0) {
        printf("El valor %d se encontró %d veces en la lista.\n", value, count);
    } else {
        printf("El valor %d no se encontró en la lista.\n", value);
    }
}

int main() {
    List list;
    initList(&list);
    generateList(&list, 50);
    
    printf("Lista generada:\n");
    printList(&list);

    int value;
    printf("\nIntroduce el valor que deseas buscar: ");
    scanf("%d", &value);

    searchList(&list, value);

    return 0;
}
